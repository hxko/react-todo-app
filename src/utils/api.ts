// src/utils/api.ts

// Define the base URL for your backend API
const API_BASE_URL = 'http://localhost:5000/api';

// Define the shape of a Todo item for API requests/responses
// We omit _id, syncStatus, and isLocal as these are client-side concerns or generated by the server.
export type TodoApiPayload = {
  title: string;
  completed: boolean;
  lastModified: number; // Use number for timestamp (Date.now())
};

// Define the expected shape of a Todo item coming from the API
export type TodoApiResponse = {
  _id: string; // Server-generated ID
  title: string;
  completed: boolean;
  userId: string;
  lastModified: number;
  createdAt: string; // Mongoose will add these
  updatedAt: string; // Mongoose will add these
};

/**
 * Fetches all todos for a given user from the backend API.
 * @param userId The ID of the user.
 * @returns A promise that resolves to an array of TodoApiResponse.
 * @throws Error if the API request fails.
 */
export const fetchUserTodosApi = async (userId: string): Promise<TodoApiResponse[]> => {
  try {
    const response = await fetch(`${API_BASE_URL}/${userId}/todos`);
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Failed to fetch todos');
    }
    return await response.json();
  } catch (error) {
    console.error('API Error: Failed to fetch todos', error);
    throw error; // Re-throw to be caught by the calling hook
  }
};

/**
 * Creates a new todo item on the backend API.
 * @param userId The ID of the user.
 * @param todoData The data for the new todo (title, completed, lastModified).
 * @returns A promise that resolves to the created TodoApiResponse.
 * @throws Error if the API request fails.
 */
export const createTodoApi = async (userId: string, todoData: TodoApiPayload): Promise<TodoApiResponse> => {
  try {
    const response = await fetch(`${API_BASE_URL}/${userId}/todos`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(todoData),
    });
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Failed to create todo');
    }
    return await response.json();
  } catch (error) {
    console.error('API Error: Failed to create todo', error);
    throw error;
  }
};

/**
 * Updates an existing todo item on the backend API.
 * @param userId The ID of the user.
 * @param todoId The ID of the todo to update.
 * @param todoData The data to update the todo with (title, completed, lastModified).
 * @returns A promise that resolves to the updated TodoApiResponse.
 * @throws Error if the API request fails.
 */
export const updateTodoApi = async (userId: string, todoId: string, todoData: TodoApiPayload): Promise<TodoApiResponse> => {
  try {
    const response = await fetch(`${API_BASE_URL}/${userId}/todos/${todoId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(todoData),
    });
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Failed to update todo');
    }
    return await response.json();
  } catch (error) {
    console.error(`API Error: Failed to update todo ${todoId}`, error);
    throw error;
  }
};

/**
 * Deletes a todo item from the backend API.
 * @param userId The ID of the user.
 * @param todoId The ID of the todo to delete.
 * @returns A promise that resolves when the deletion is successful.
 * @throws Error if the API request fails.
 */
export const deleteTodoApi = async (userId: string, todoId: string): Promise<void> => {
  try {
    const response = await fetch(`${API_BASE_URL}/${userId}/todos/${todoId}`, {
      method: 'DELETE',
    });
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Failed to delete todo');
    }
    // No content expected for 204 No Content
  } catch (error) {
    console.error(`API Error: Failed to delete todo ${todoId}`, error);
    throw error;
  }
};
